" Cf - check a flag. Return true if the flag is specified.
function! Cf(flag)
    return exists('g:javacoptions') && stridx(g:javacoptions, a:flag) >= 0
endfunction

" we need the conceal feature (vim ‚â• 7.3)
if exists('g:no_java_conceal') || !has('conceal') || &enc != 'utf-8'
    finish
endif

syntax clear javaOperator
syntax clear javaBoolean 
syntax clear javaConstant
syntax clear javaType
syntax clear javaParen
syntax clear javaParenT1
syntax clear javaParenT
syntax clear javaParen1
syntax clear javaParenT2
syntax clear javaParen2
syntax clear javaBraces

syn keyword javaType            boolean char byte short int long float double
"syn keyword javaType            void
"syn keyword javaType		  Integer Double Date Boolean Float String Array Vector List
syn keyword javaType		  Double Boolean Float Vector 

" Constants
syntax match javaNull1 contained "\<n" conceal cchar= 
syntax match javaNull2 contained "u" conceal cchar=‚ä•
syntax match javaNull3 contained "ll\>" conceal cchar= 
syntax match javaNull "\<null\>" contains=javaNull1,javaNull2,javaNull3
"syntax match javaNiceConstant "\<null\>" conceal cchar=‚ä•

syntax match javaTrue1 contained "\<t" conceal cchar= 
syntax match javaTrue2 contained "r" conceal cchar=ùêì
syntax match javaTrue3 contained "ue\>" conceal cchar= 
syntax match javaTrue "\<true\>" contains=javaTrue1,javaTrue2,javaTrue3
"syntax match javaNiceBoolean "\<true\>" conceal cchar=ùêì

syntax match javaFalse1 contained "\<f" conceal cchar= 
syntax match javaFalse2 contained "a" conceal cchar=ùêÖ
syntax match javaFalse3 contained "lse\>" conceal cchar= 
syntax match javaFalse "\<false\>" contains=javaFalse1,javaFalse2,javaFalse3
"syntax match javaNiceBoolean "\<false\>" conceal cchar=ùêÖ


" Comparisons
syntax match javaNiceOperator "\s<=\s" conceal cchar=‚â§
syntax match javaNiceOperator "\s>=\s" conceal cchar=‚â•
syntax match javaNiceOperator "=\@<!===\@!" conceal cchar=‚â°

syntax match javaNeq1 contained "\s!" conceal cchar= 
syntax match javaNeq2 contained "=\s" conceal cchar=‚â¢
syntax match javaNeqFull "\s!=\s" contains=javaNeq1,javaNeq2

" Boolean operations
syntax match javaOr1 contained "\s|" conceal cchar=‚à®
syntax match javaOr2 contained "|\s" conceal cchar= 
syntax match javaOrFull "\s||\s" contains=javaOr1,javaOr2

syntax match javaAnd1 contained "\s&" conceal cchar=‚àß
syntax match javaAnd2 contained "&\s" conceal cchar= 
syntax match javaAndFull "\s&&\s" contains=javaAnd1,javaAnd2

syntax match javaNand1 contained "\s&" conceal cchar=‚äº
syntax match javaNand2 contained "&\s*!" conceal cchar= 
syntax match javaNandFull "\s&&\s*!" contains=javaNand1,javaNand2

syntax match javaNor1 contained "\s|" conceal cchar=‚äΩ
syntax match javaNor2 contained "|\s*!" conceal cchar= 
syntax match javaNorFull "\s||\s*!" contains=javaNor1,javaNor2

syntax match javaNiceOperator "\s^\s" conceal cchar=‚äª

syntax match javaNiceOperator "\<not\>" conceal cchar=¬¨
syntax match javaNiceOperator "!\@<!!=\@!" conceal cchar=¬¨ 

" Types
syntax match javaNiceType "\<Boolean\>" conceal cchar=ùîπ
syntax match javaNiceType "\<Integer\>" conceal cchar=‚Ñ§
syntax match javaNiceType "\<Float\>" conceal cchar=‚Ñú

" Assignment arrow
syntax match javaRLArrow1 contained "\s\+" conceal cchar= 
syntax match javaRLArrow2 contained "=" conceal cchar=‚Üê
syntax match javaRLArrow3 contained "\s\+" conceal cchar= 
syntax match javaRLArrowFull "\s\+=\s\+" contains=javaRLArrow1,javaRLArrow2,javaRLArrow3

syntax match javaSize1 contained "\<s" conceal cchar=#
syntax match javaSize2 contained "ize\>" conceal cchar=‚Çõ
syntax match javaSize "\<size\>" contains=javaSize1,javaSize2

syntax match javaCount1 contained "\<c" conceal cchar=#
syntax match javaCount2 contained "ount\>" conceal cchar=‚Çô
syntax match javaCount "\<count\>" contains=javaCount1,javaCount2

syntax match javaLength1 contained "\<l" conceal cchar=#
syntax match javaLength2 contained "ength" conceal cchar=‚Çó
syntax match javaLength "\<length\>" contains=javaLength1,javaLength2

syntax keyword javaNiceReturn return conceal cchar=‚Üµ

" Misc
syntax match javaVoid1 contained "\<v" conceal cchar= 
syntax match javaVoid2 contained "o" conceal cchar=‚ä•
syntax match javaVoid3 contained "id\>" conceal cchar= 
syntax match javaVoid "\<void\>" contains=javaVoid1,javaVoid2,javaVoid3

syntax match javaArray1 contained "\<A" conceal cchar= 
syntax match javaArray2 contained "r" conceal cchar=ùíú
syntax match javaArray3 contained "rray\>" conceal cchar= 
syntax match javaArray "\<Array\>" contains=javaArray1,javaArray2,javaArray3
syntax match javaList1 contained "\<L" conceal cchar= 
syntax match javaList2 contained "i" conceal cchar=‚Ñí
syntax match javaList3 contained "st\>" conceal cchar= 
syntax match javaList "\<List\>" contains=javaList1,javaList2,javaList3

" Single character variable names usually indicate something generic and
" should be emphasized. eg ùíá(ùíä)
" 's' Option to disable this.
if !Cf('S')
    syntax keyword javaNiceStatement a conceal cchar=ùíÇ
    syntax keyword javaNiceStatement b conceal cchar=ùíÉ
    syntax keyword javaNiceStatement c conceal cchar=ùíÑ
    syntax keyword javaNiceStatement d conceal cchar=ùíÖ
    syntax keyword javaNiceStatement e conceal cchar=ùíÜ
    syntax keyword javaNiceStatement f conceal cchar=ùíá
    syntax keyword javaNiceStatement g conceal cchar=ùíà
    syntax keyword javaNiceStatement h conceal cchar=ùíâ
    syntax keyword javaNiceStatement i conceal cchar=ùíä
    syntax keyword javaNiceStatement j conceal cchar=ùíã
    syntax keyword javaNiceStatement k conceal cchar=ùíå
    syntax keyword javaNiceStatement l conceal cchar=ùíç
    syntax keyword javaNiceStatement m conceal cchar=ùíé
    syntax keyword javaNiceStatement n conceal cchar=ùíè
    syntax keyword javaNiceStatement o conceal cchar=ùíê
    syntax keyword javaNiceStatement p conceal cchar=ùíë
    syntax keyword javaNiceStatement q conceal cchar=ùíí
    syntax keyword javaNiceStatement r conceal cchar=ùíì
    syntax keyword javaNiceStatement s conceal cchar=ùíî
    syntax keyword javaNiceStatement t conceal cchar=ùíï
    syntax keyword javaNiceStatement u conceal cchar=ùíñ
    syntax keyword javaNiceStatement v conceal cchar=ùíó
    syntax keyword javaNiceStatement w conceal cchar=ùíò
    syntax keyword javaNiceStatement x conceal cchar=ùíô
    syntax keyword javaNiceStatement y conceal cchar=ùíö
    syntax keyword javaNiceStatement z conceal cchar=ùíõ
endif

if Cf('s')
    syntax keyword javaNiceStatement A conceal cchar=ùê¥
    syntax keyword javaNiceStatement B conceal cchar=ùêµ
    syntax keyword javaNiceStatement C conceal cchar=ùê∂
    syntax keyword javaNiceStatement D conceal cchar=ùê∑
    syntax keyword javaNiceStatement E conceal cchar=ùê∏
    syntax keyword javaNiceStatement F conceal cchar=ùêπ
    syntax keyword javaNiceStatement G conceal cchar=ùê∫
    syntax keyword javaNiceStatement H conceal cchar=ùêª
    syntax keyword javaNiceStatement I conceal cchar=ùêº
    syntax keyword javaNiceStatement J conceal cchar=ùêΩ
    syntax keyword javaNiceStatement K conceal cchar=ùêæ
    syntax keyword javaNiceStatement L conceal cchar=ùêø
    syntax keyword javaNiceStatement M conceal cchar=ùëÄ
    syntax keyword javaNiceStatement N conceal cchar=ùëÅ
    syntax keyword javaNiceStatement O conceal cchar=ùëÇ
    syntax keyword javaNiceStatement P conceal cchar=ùëÉ
    syntax keyword javaNiceStatement Q conceal cchar=ùëÑ
    syntax keyword javaNiceStatement R conceal cchar=ùëÖ
    syntax keyword javaNiceStatement S conceal cchar=ùëÜ
    syntax keyword javaNiceStatement T conceal cchar=ùëá
    syntax keyword javaNiceStatement U conceal cchar=ùëà
    syntax keyword javaNiceStatement V conceal cchar=ùëâ
    syntax keyword javaNiceStatement W conceal cchar=ùëä
    syntax keyword javaNiceStatement X conceal cchar=ùëã
    syntax keyword javaNiceStatement Y conceal cchar=ùëå
    syntax keyword javaNiceStatement Z conceal cchar=ùëç
endif

" Handle exponentiation
" '1' option to disable numeric superscripts concealing, e.g. x¬≤.
if !Cf('1')
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)0\>" conceal cchar=‚Å∞
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)1\>" conceal cchar=¬π
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)2\>" conceal cchar=¬≤
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)3\>" conceal cchar=¬≥
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)4\>" conceal cchar=‚Å¥
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)5\>" conceal cchar=‚Åµ
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)6\>" conceal cchar=‚Å∂
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)7\>" conceal cchar=‚Å∑
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)8\>" conceal cchar=‚Å∏
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)9\>" conceal cchar=‚Åπ
endif 

" 'a' option to disable alphabet superscripts concealing, e.g. x‚Åø.
if !Cf('a')
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)a\>" conceal cchar=·µÉ
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)b\>" conceal cchar=·µá
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)c\>" conceal cchar=·∂ú
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)d\>" conceal cchar=·µà
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)e\>" conceal cchar=·µâ
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)f\>" conceal cchar=·∂†
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)g\>" conceal cchar=·µç
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)h\>" conceal cchar= ∞
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)i\>" conceal cchar=‚Å±
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)j\>" conceal cchar= ≤
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)k\>" conceal cchar=·µè
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)l\>" conceal cchar=À°
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)m\>" conceal cchar=·µê
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)n\>" conceal cchar=‚Åø
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)o\>" conceal cchar=·µí
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)p\>" conceal cchar=·µñ
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)r\>" conceal cchar= ≥
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)s\>" conceal cchar=À¢
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)t\>" conceal cchar=·µó
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)u\>" conceal cchar=·µò
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)v\>" conceal cchar=·µõ
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)w\>" conceal cchar= ∑
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)x\>" conceal cchar=À£
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)y\>" conceal cchar= ∏
    syntax match javaNiceOperator "\( \|\)\*\*\( \|\)z\>" conceal cchar=·∂ª
endif



" Fractions
" 'f' option to enables fractions
if Cf('f')
    syntax keyword javaNiceBuiltin 0.25 conceal cchar=¬º
    syntax keyword javaNiceBuiltin 0.5 conceal cchar=¬Ω
    syntax keyword javaNiceBuiltin 0.75 conceal cchar=¬æ
    " ‚Öì ¬º ‚Öï ‚Öô ‚Öõ  ‚Öî ‚Öñ  ¬æ ‚Öó ‚Öú  ‚Öò  ‚Öö ‚Öùa ‚Öû
" ¬º   &frac14;    &#188;  &#xBC;
" VULGAR FRACTION 1/2 ¬Ω   &frac12;    &#189;  &#xBD;
" VULGAR FRACTION 3/4 ¬æ   &frac34;    &#190;  &#xBE;
" VULGAR FRACTION 1/3 ‚Öì   --  &#8531; &#x2153;
" VULGAR FRACTION 2/3 ‚Öî   --  &#8532; &#x2154;
" VULGAR FRACTION 1/5 ‚Öï   --  &#8533; &#x2155;
" VULGAR FRACTION 2/5 ‚Öñ   --  &#8354; &#x2156;
" VULGAR FRACTION 3/5 ‚Öó   --  &#8535; &#x2157;
" VULGAR FRACTION 4/5 ‚Öò   --  &#8536; &#x2158;
" VULGAR FRACTION 1/6 ‚Öô   --  &#8537; &#x2159;
" VULGAR FRACTION 5/6 ‚Öö   --  &#8538; &#x215A;
" VULGAR FRACTION 1/8 ‚Öõ   --  &#8539; &#x215B;
" VULGAR FRACTION 3/8 ‚Öú   --  &#8540; &#x215C;
" VULGAR FRACTION 5/8 ‚Öù   --  &#8541; &#x215D;
" VULGAR FRACTION 7/8 ‚Öû
endif 



hi link javaNiceOperator Operator
hi! link Conceal Operator
hi! Conceal ctermbg=Black ctermfg=LightGreen

setlocal conceallevel=2
setlocal concealcursor=nv
